<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>http://localhost:1313/</link>
    <description>Recent content on </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 14 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ledger Reports in Emacs</title>
      <link>http://localhost:1313/blog/emacs_ledger_reports/</link>
      <pubDate>Fri, 10 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/emacs_ledger_reports/</guid>
      <description>&lt;p&gt;&#xA;A ledger is a record-keeping system used to track and manage financial transactions, balances, and accounts. It serves as a central repository of all financial data for an individual, organization, or business. Ledgers are used in accounting to organize and summarize financial information, facilitating the preparation of financial statements.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Plaintext Accounting ( &lt;a href=&#34;https://plaintextaccounting.org&#34;&gt;https://plaintextaccounting.org&lt;/a&gt; ) provides valuable resources on managing financial data using plain text as the primary storage format for transactions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emacs for the Minimalist Developer: Building a Modular Setup</title>
      <link>http://localhost:1313/blog/emacs_for_the_minimalist_dev/</link>
      <pubDate>Tue, 29 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/emacs_for_the_minimalist_dev/</guid>
      <description>&lt;p&gt;&#xA;Improved my current setup from the last Emacs setup. I’ve taken the modular configuration approach from my previous Emacs Bankruptcy post but refined it to be less granular. Rather than configuring each package in isolation, I&amp;#39;ve organized related configurations into broader groups, making it more adaptable and easier to make changes. This allows me to add new packages and configurations without hardcoding which org files need to be tangled (the process of transforming org text to elisp code), significantly simplifying the process.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ztos</title>
      <link>http://localhost:1313/client-work/ztos/</link>
      <pubDate>Sun, 25 Aug 2024 10:23:39 +0200</pubDate>
      <guid>http://localhost:1313/client-work/ztos/</guid>
      <description></description>
    </item>
    <item>
      <title>Zoo</title>
      <link>http://localhost:1313/client-work/zoo/</link>
      <pubDate>Sun, 25 Aug 2024 10:23:08 +0200</pubDate>
      <guid>http://localhost:1313/client-work/zoo/</guid>
      <description></description>
    </item>
    <item>
      <title>Kanba</title>
      <link>http://localhost:1313/client-work/kanba/</link>
      <pubDate>Sun, 25 Aug 2024 10:22:34 +0200</pubDate>
      <guid>http://localhost:1313/client-work/kanba/</guid>
      <description></description>
    </item>
    <item>
      <title>Goldline</title>
      <link>http://localhost:1313/client-work/goldline/</link>
      <pubDate>Sun, 25 Aug 2024 10:21:48 +0200</pubDate>
      <guid>http://localhost:1313/client-work/goldline/</guid>
      <description></description>
    </item>
    <item>
      <title>Earth 2.0</title>
      <link>http://localhost:1313/client-work/earth2.0/</link>
      <pubDate>Sun, 25 Aug 2024 10:17:12 +0200</pubDate>
      <guid>http://localhost:1313/client-work/earth2.0/</guid>
      <description></description>
    </item>
    <item>
      <title>Asgardia</title>
      <link>http://localhost:1313/client-work/asgardia/</link>
      <pubDate>Sun, 25 Aug 2024 09:53:42 +0200</pubDate>
      <guid>http://localhost:1313/client-work/asgardia/</guid>
      <description></description>
    </item>
    <item>
      <title>Dot Emacs Bankruptcy</title>
      <link>http://localhost:1313/blog/dot_emacs_bankruptcy/</link>
      <pubDate>Thu, 28 Sep 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/dot_emacs_bankruptcy/</guid>
      <description>&lt;p&gt;&#xA;I started using Emacs in 2015 during my first year of university, likely with version 25.1. It&amp;#39;s hard to believe that it&amp;#39;s been nearly a decade since I began my journey with this powerful tool. Over the years, I’ve experienced a couple of &amp;#34;dot-emacs bankruptcies,&amp;#34; where my configurations became too cumbersome and inefficient. But this time, things are different.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;In my early attempts, I experimented with all sorts of configurations, adding every new Elisp function and macro inside my Emacs just trying new stuff and failing to make all work together. However, the result was chaos - startup times creeping up to two minutes and barely anything working.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Software Developer</title>
      <link>http://localhost:1313/experience/2022_software_developer_ericsson/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/experience/2022_software_developer_ericsson/</guid>
      <description>&lt;p&gt;&#xA;As a Software Developer working remotely with international teams (Brazil, Canada, India), I focused on enhancing Ericsson&amp;#39;s Digital Monetization Platform. My key responsibility was to implement new features and fix issues in microservices for product offering transactions. A significant portion of my work was spent on proof-of-concept projects, where I explored innovative ways to adapt Ericsson’s software solutions for new use cases. Daily, I worked with Camunda to handle system flows, modeled entities, developed Java and JavaScript code, mentored junior developers, and produced documentation. This role required expertise in microservice architecture, Kubernetes, process automation, and system integration to deliver scalable and functional solutions aligned with Ericsson’s goals.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Software Developer</title>
      <link>http://localhost:1313/experience/2020_software_developer_neuralmind/</link>
      <pubDate>Tue, 01 Dec 2020 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/experience/2020_software_developer_neuralmind/</guid>
      <description>&lt;p&gt;&#xA;I worked as a Software Developer for a year, focusing on building an automated tool that retrieved public documents to maintain compliance in transactions. This data was then displayed on a web dashboard. My daily tasks included coding in Python (Django) and JavaScript (React.js), conducting code reviews, and ensuring the project adhered to functional, non-functional, and design requirements.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Assisted in an automated system for searching and analyzing unstructured documents and images.&lt;/li&gt;&#xA;&lt;li&gt;Developed automatic search tools for public certificates to ensure compliance, presenting the retrieved information in a comprehensive dashboard.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Artificial Intelligence Researcher</title>
      <link>http://localhost:1313/experience/2019_ai_researcher_neuralmind/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/experience/2019_ai_researcher_neuralmind/</guid>
      <description>&lt;p&gt;&#xA;I spent a year conducting Artificial Intelligence research, where I developed a Reinforcement Learning algorithm for trading Brazilian stocks. My key responsibility was to research, design the environment and train the AI models. In my day to day, I coded in Python (PyTorch), ran experiments, analyzed large datasets, and ensured our AI systems were scalable, accurate, and compliant with legal standards.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Conducted research and development of a reinforcement learning-based artificial intelligence designed to operate on the Brazilian stock market. Focused on maximizing daily profits by trading Bovespa mini-index contracts (WIN). Algorithm used Agent-Critic (AC), Proximal Policy Optimization (PPO), Soft Actor-Critic (SAC)&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Macro Simulations</title>
      <link>http://localhost:1313/projects/macro_simulations/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/macro_simulations/</guid>
      <description>&lt;p&gt;&#xA;Repository link: &lt;a href=&#34;https://github.com/chinen93/macro-simulate&#34;&gt;https://github.com/chinen93/macro-simulate&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Programs to simulate a sequence of keyboard inputs in a specific setting. Those inputs were necessary to update an inventory database using a program that didn&amp;#39;t support macros. So I create the following programs to be able to read from a file and input simulate keyboard presses. Automating some steps.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Simulation created:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Macro Simulation&lt;/li&gt;&#xA;&lt;li&gt;Register Simulation&lt;/li&gt;&#xA;&lt;li&gt;Location Simulation&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Teaching Assistant</title>
      <link>http://localhost:1313/experience/2017_teaching_assistant_unicamp/</link>
      <pubDate>Fri, 01 Dec 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/experience/2017_teaching_assistant_unicamp/</guid>
      <description>&lt;p&gt;&#xA;Assisted professors in delivering coursework related to software development, providing hands-on support to students during lab sessions.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Conducted study groups, clarifying complex concepts in data structures, and algorithm design, deepening students understanding of course material.&lt;/li&gt;&#xA;&lt;li&gt;Offered constructive feedback to improve student technical skills and problem-solving abilities&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>PyPocket</title>
      <link>http://localhost:1313/projects/pypocket/</link>
      <pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/pypocket/</guid>
      <description>&lt;p&gt;&#xA;Repository link: &lt;a href=&#34;https://github.com/chinen93/PyPocket&#34;&gt;https://github.com/chinen93/PyPocket&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;PyPocket is a project that import some itens from pocket with a specific tag. It appends those imported itens into a file. The default file is ~/pocket.org, but you can change it with when calling the program.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;It uses Python 3.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;The itens that are gotten are those with a specific tag. The default tag is &lt;strong&gt;export emacs&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dot Emacs Configuration</title>
      <link>http://localhost:1313/projects/dot_emacs_configuration/</link>
      <pubDate>Wed, 23 Mar 2016 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/projects/dot_emacs_configuration/</guid>
      <description>&lt;p&gt;&#xA;Repository link: &lt;a href=&#34;https://github.com/chinen93/dotfiles-emacs&#34;&gt;https://github.com/chinen93/dotfiles-emacs&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&#xA;My personal 8+ years Emacs configuration, written in Emacs Lisp.&lt;/p&gt;&#xA;&lt;p&gt;&#xA;Emacs is a highly customizable and extensible text editor that can be used for various tasks, including coding, text editing, and project management. It’s built with Emacs Lisp, allowing users to modify its behavior and functions.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
